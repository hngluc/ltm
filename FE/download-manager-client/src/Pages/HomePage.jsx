// src/Pages/HomePage.jsx
import React, { useEffect, useState, forwardRef, useImperativeHandle, useCallback } from "react";
import { API_BASE } from "../config"; // S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n n·∫øu config.js ·ªü ch·ªó kh√°c
import { useDownloader } from "../hooks/useDownloader"; // S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n n·∫øu useDownloader.js ·ªü ch·ªó kh√°c
import ProgressBar from "../components/ProgressBar"; // S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n n·∫øu ProgressBar.jsx ·ªü ch·ªó kh√°c
import "../App.css"; // ƒê·∫£m b·∫£o App.css ch·ª©a c√°c class button c·∫ßn thi·∫øt

// S·ª≠ d·ª•ng forwardRef ƒë·ªÉ nh·∫≠n ref t·ª´ App.js
const HomePage = forwardRef((props, ref) => {
  const [files, setFiles] = useState([]);
  const [loading, setLoading] = useState(true);
  const { progress, downloading, startDownload, pause, cancel } = useDownloader();

  // T√°ch h√†m fetch ra ri√™ng ƒë·ªÉ c√≥ th·ªÉ g·ªçi l·∫°i
  const fetchFiles = useCallback(async () => {
    try {
      // D√πng fetch th√¥ng th∆∞·ªùng v√¨ ƒë√¢y l√† API public
      const res = await fetch(`${API_BASE || ""}/files`); 
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      const data = await res.json();
      setFiles(data || []);
    } catch (e) {
      console.error("Fetch files failed:", e);
      setFiles([]); // ƒê·∫∑t l·∫°i files th√†nh r·ªóng n·∫øu l·ªói
    } finally {
      setLoading(false);
    }
  }, []); // Dependencies r·ªóng v√¨ API_BASE kh√¥ng ƒë·ªïi

  // Cung c·∫•p h√†m 'refresh' ra b√™n ngo√†i th√¥ng qua 'ref'
  useImperativeHandle(ref, () => ({
    refresh: () => {
      console.log("Refreshing file list from parent component...");
      fetchFiles(); // G·ªçi l·∫°i h√†m fetch
    }
  }));

  // G·ªçi h√†m fetchFiles ·ªü l·∫ßn ƒë·∫ßu ti√™n component mount
  useEffect(() => {
    setLoading(true); // B√°o loading cho l·∫ßn t·∫£i ƒë·∫ßu
    fetchFiles();
  }, [fetchFiles]); // Ph·ª• thu·ªôc v√†o fetchFiles

  // L·∫Øng nghe s·ª± ki·ªán SSE ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t list
  useEffect(() => {
    console.log("Connecting to real-time file list updates...");
    const es = new EventSource(`${API_BASE || ""}/files/events/subscribe`);

    es.addEventListener("list-changed", (event) => {
      console.log("File list changed on server, refreshing...", event.data);
      // G·ªçi l·∫°i h√†m fetchFiles ƒë·ªÉ l√†m m·ªõi danh s√°ch
      fetchFiles();
    });

    es.onerror = (e) => {
      console.error("SSE connection error for file list.", e);
      // EventSource s·∫Ω t·ª± ƒë·ªông c·ªë g·∫Øng k·∫øt n·ªëi l·∫°i, kh√¥ng c·∫ßn l√†m g√¨ th√™m
      // C√≥ th·ªÉ ƒë√≥ng k·∫øt n·ªëi c≈© n·∫øu c·∫ßn es.close();
    };

    // Cleanup function: ƒê√≥ng k·∫øt n·ªëi SSE khi component unmount
    return () => {
      console.log("Closing real-time file list connection.");
      es.close();
    };
  }, [fetchFiles]); // Ph·ª• thu·ªôc v√†o fetchFiles

  // H√†m ƒë·ªãnh d·∫°ng k√≠ch th∆∞·ªõc file
  const formatBytes = (bytes) => {
    if (bytes === 0) return "0 B";
    if (!bytes || bytes < 0) return "-"; // X·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p √¢m ho·∫∑c null/undefined
    const k = 1024;
    const units = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]; // Th√™m ƒë∆°n v·ªã l·ªõn h∆°n
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    // ƒê·∫£m b·∫£o i n·∫±m trong kho·∫£ng index c·ªßa units
    const unitIndex = Math.min(i, units.length - 1); 
    // S·ª≠ d·ª•ng toFixed(2) v√† parseFloat ƒë·ªÉ b·ªè s·ªë 0 th·ª´a
    return `${parseFloat((bytes / Math.pow(k, unitIndex)).toFixed(2))} ${units[unitIndex]}`;
  };

  // ---- X√ìA B·ªé HO√ÄN TO√ÄN H√ÄM handleDelete v√† handleRename ----

  // Render ph·∫ßn loading ho·∫∑c khi kh√¥ng c√≥ file
  if (loading) return <p className="file-list-status">ƒêang t·∫£i danh s√°ch file...</p>;
  if (!Array.isArray(files) || files.length === 0) return <p className="file-list-status">Kh√¥ng c√≥ file n√†o trong th∆∞ m·ª•c shared.</p>;

  // Render b·∫£ng danh s√°ch file
  return (
    <div className="file-list-container">
      <h2>üìÅ Danh s√°ch File Shared (C√¥ng khai)</h2>
      <table className="file-table">
        <thead>
          <tr>
            <th className="th-name">T√™n File</th>
            <th className="th-size">K√≠ch th∆∞·ªõc</th>
            <th className="th-date">C·∫≠p nh·∫≠t</th>
            <th className="th-progress">Ti·∫øn tr√¨nh T·∫£i</th>
            <th className="th-action">H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {files.map((f) => {
            // ƒê·∫£m b·∫£o f.name t·ªìn t·∫°i tr∆∞·ªõc khi d√πng l√†m key/progress index
            if (!f || typeof f.name !== 'string') return null; 
            
            const pct = Math.round(progress[f.name] ?? 0);
            const isDownloading = !!downloading[f.name];
            
            return (
              <tr key={f.name}>
                <td className="cell-name">{f.name}</td>
                <td className="cell-size">{formatBytes(f.size)}</td>
                <td className="cell-date">
                  {/* Ki·ªÉm tra f.lastModified tr∆∞·ªõc khi t·∫°o Date */}
                  {f.lastModified ? new Date(f.lastModified).toLocaleString() : '-'}
                </td>
                <td className="cell-progress">
                  <ProgressBar value={pct} />
                  <span className="progress-text">{pct}%</span>
                </td>
                
                {/* Ch·ªâ hi·ªÉn th·ªã n√∫t Download/Resume/Clear/Pause/Cancel */}
                <td className="cell-action">
                  {!isDownloading ? (
                    <>
                      {/* Logic Resume/Download */}
                      {pct > 0 && pct < 100 ? (
                        <button className="action-button resume-button" onClick={() => startDownload(f.name)}>
                          ‚ñ∂Ô∏è Resume
                        </button>
                      ) : (
                        <button className="action-button download-button" onClick={() => startDownload(f.name)}>
                          ‚¨áÔ∏è Download
                        </button>
                      )}
                      
                      {/* N√∫t Clear ch·ªâ hi·ªán khi c√≥ ti·∫øn tr√¨nh d·ªü */}
                      {pct > 0 && pct < 100 && (
                        <button className="action-button cancel-button" onClick={() => cancel(f.name)}>
                          üóëÔ∏è Clear
                        </button>
                      )}
                    </>
                  ) : (
                    <>
                      {/* Logic Pause/Cancel khi ƒëang t·∫£i */}
                      <button className="action-button pause-button" onClick={() => pause(f.name)}>
                        ‚è∏ Pause
                      </button>
                      <button className="action-button cancel-button" onClick={() => cancel(f.name)}>
                        ‚úñÔ∏è Cancel
                      </button>
                    </>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}); // K·∫øt th√∫c forwardRef

export default HomePage; // Export component

