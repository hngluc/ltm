// src/components/FileList.jsx
import React, { useEffect, useState } from "react";
import { API_BASE } from "../config";
import { useDownloader } from "../hooks/useDownloader";
import ProgressBar from "./ProgressBar";
import "../App.css";

export default function FileList() {
  const [files, setFiles] = useState([]);
  const [loading, setLoading] = useState(true);
  const { progress, downloading, startDownload, pause, cancel } = useDownloader();

  useEffect(() => {
    (async () => {
      try {
        const res = await fetch(`${API_BASE || ""}/files`);
        const data = await res.json();
        setFiles(data || []);
      } catch (e) {
        console.error("Fetch files failed:", e);
        setFiles([]);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const formatBytes = (bytes) => {
    if (bytes === 0) return "0 B";
    if (!bytes && bytes !== 0) return "-";
    const k = 1024, units = ["B", "KB", "MB", "GB", "TB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${(bytes / Math.pow(k, i)).toFixed(2)} ${units[i]}`;
  };

  const handleDelete = async (fileName) => {
    // X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a file: ${fileName}?`)) {
      return;
    }

    try {
      const res = await fetch(`${API_BASE || ""}/files/${fileName}`, {
        method: "DELETE",
      });

      if (!res.ok) {
        const errData = await res.json();
        throw new Error(errData.message || "L·ªói khi x√≥a file.");
      }
      
      console.log(`File ${fileName} ƒë√£ ƒë∆∞·ª£c x√≥a.`);
      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch file tr√™n UI
      setFiles(files.filter((f) => f.name !== fileName));

    } catch (e) {
      console.error("Delete file failed:", e);
      alert(`X√≥a file th·∫•t b·∫°i: ${e.message}`);
    }
  };

  const handleRename = async (oldName) => {
    const newName = window.prompt("Nh·∫≠p t√™n m·ªõi cho file:", oldName);

    // N·∫øu ng∆∞·ªùi d√πng h·ªßy ho·∫∑c kh√¥ng nh·∫≠p g√¨
    if (!newName || newName === oldName) {
      return;
    }

    try {
      const res = await fetch(`${API_BASE || ""}/files/${oldName}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ newName: newName }),
      });

      if (!res.ok) {
        const errData = await res.json();
        throw new Error(errData.message || "L·ªói khi ƒë·ªïi t√™n file.");
      }
      
      console.log(`ƒê√£ ƒë·ªïi t√™n ${oldName} -> ${newName}`);
      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch file tr√™n UI
      setFiles(files.map(f => 
        f.name === oldName ? { ...f, name: newName } : f
      ));

    } catch (e) {
      console.error("Rename file failed:", e);
      alert(`ƒê·ªïi t√™n file th·∫•t b·∫°i: ${e.message}`);
    }
  };

  if (loading) return <p className="file-list-status">ƒêang t·∫£i danh s√°ch file...</p>;
  if (files.length === 0) return <p className="file-list-status">Kh√¥ng c√≥ file n√†o trong th∆∞ m·ª•c shared.</p>;

  return (
    <div className="file-list-container">
      <h2>üìÅ Danh s√°ch File Shared</h2>
      <table className="file-table">
        <thead>
          <tr>
            <th className="th-name">T√™n File</th>
            <th className="th-size">K√≠ch th∆∞·ªõc</th>
            <th className="th-date">C·∫≠p nh·∫≠t</th>
            <th className="th-progress">Ti·∫øn tr√¨nh</th>
            <th className="th-action">H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {files.map((f) => {
            const pct = Math.round(progress[f.name] ?? 0);
            const isDownloading = !!downloading[f.name];
            return (
              <tr key={f.name}>
                <td className="cell-name">{f.name}</td>
                <td className="cell-size">{formatBytes(f.size)}</td>
                <td className="cell-date">{new Date(f.lastModified).toLocaleString()}</td>
                <td className="cell-progress">
                  <ProgressBar value={pct} />
                  <span className="progress-text">{pct}%</span>
                </td>
                <td className="cell-action">
                  {!isDownloading ? (
                    <>
                      {/* === LOGIC RESUME B·∫ÆT ƒê·∫¶U === */}
                      {pct > 0 && pct < 100 ? (
                        // 1. ƒê√£ c√≥ ti·∫øn tr√¨nh -> N√∫t "Resume"
                        <button className="action-button resume-button" onClick={() => startDownload(f.name)}>
                          ‚ñ∂Ô∏è Resume
                        </button>
                      ) : (
                        // 2. Ch∆∞a c√≥ g√¨ -> N√∫t "Download"
                        <button className="action-button download-button" onClick={() => startDownload(f.name)}>
                          ‚¨áÔ∏è Download
                        </button>
                      )}
                      
                      {/* N√∫t "Clear" ch·ªâ hi·ªÉn th·ªã khi c√≥ ti·∫øn tr√¨nh d·ªü dang */}
                      {pct > 0 && pct < 100 && (
                        <button className="action-button cancel-button" onClick={() => cancel(f.name)}>
                          üóëÔ∏è Clear
                        </button>
                      )}
                      {/* === LOGIC RESUME K·∫æT TH√öC === */}

                      {/* N√∫t Rename v√† Delete gi·ªØ nguy√™n */}
                      <button className="action-button rename-button" onClick={() => handleRename(f.name)}>
                        ‚úèÔ∏è Rename
                      </button>
                      <button className="action-button delete-button" onClick={() => handleDelete(f.name)}>
                        üóëÔ∏è Delete
                      </button>
                    </>
                  ) : (
                    <>
                      <button className="action-button pause-button" onClick={() => pause(f.name)}>
                        ‚è∏ Pause
                      </button>
                      <button className="action-button cancel-button" onClick={() => cancel(f.name)}>
                        ‚úñÔ∏è Cancel
                      </button>
                    </>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}
